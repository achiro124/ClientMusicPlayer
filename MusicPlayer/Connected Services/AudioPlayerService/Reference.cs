//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicPlayer.AudioPlayerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AudioPlayerService.IServiceAudioPlayer")]
    public interface IServiceAudioPlayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioListResponse")]
        AudioPlayerLibrary.Audio[] GetAudioList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioListResponse")]
        System.Threading.Tasks.Task<AudioPlayerLibrary.Audio[]> GetAudioListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetFavoriteAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetFavoriteAudioListResponse")]
        AudioPlayerLibrary.Audio[] GetFavoriteAudioList(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetFavoriteAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetFavoriteAudioListResponse")]
        System.Threading.Tasks.Task<AudioPlayerLibrary.Audio[]> GetFavoriteAudioListAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioFile", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioFileResponse")]
        byte[] GetAudioFile(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioFile", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetAudioFileAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Registration", ReplyAction="http://tempuri.org/IServiceAudioPlayer/RegistrationResponse")]
        AudioPlayerLibrary.User Registration(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Registration", ReplyAction="http://tempuri.org/IServiceAudioPlayer/RegistrationResponse")]
        System.Threading.Tasks.Task<AudioPlayerLibrary.User> RegistrationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Authorization", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AuthorizationResponse")]
        AudioPlayerLibrary.User Authorization(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Authorization", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AuthorizationResponse")]
        System.Threading.Tasks.Task<AudioPlayerLibrary.User> AuthorizationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/EditUserIcon")]
        void EditUserIcon(int userId, byte[] icon);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/EditUserIcon")]
        System.Threading.Tasks.Task EditUserIconAsync(int userId, byte[] icon);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/AddFavoriteAudio")]
        void AddFavoriteAudio(int userId, int audioId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/AddFavoriteAudio")]
        System.Threading.Tasks.Task AddFavoriteAudioAsync(int userId, int audioId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/DeleteFavoriteAudio")]
        void DeleteFavoriteAudio(int userId, int audioId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/DeleteFavoriteAudio")]
        System.Threading.Tasks.Task DeleteFavoriteAudioAsync(int userId, int audioId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/AddUserAudiolist", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AddUserAudiolistResponse")]
        int AddUserAudiolist(int userId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/AddUserAudiolist", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AddUserAudiolistResponse")]
        System.Threading.Tasks.Task<int> AddUserAudiolistAsync(int userId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetUserAudiolist", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetUserAudiolistResponse")]
        AudioPlayerLibrary.UserAlboms[] GetUserAudiolist(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetUserAudiolist", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetUserAudiolistResponse")]
        System.Threading.Tasks.Task<AudioPlayerLibrary.UserAlboms[]> GetUserAudiolistAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/DeleteUserAudiolist")]
        void DeleteUserAudiolist(int userId, int audiolistId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceAudioPlayer/DeleteUserAudiolist")]
        System.Threading.Tasks.Task DeleteUserAudiolistAsync(int userId, int audiolistId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAudioPlayerChannel : MusicPlayer.AudioPlayerService.IServiceAudioPlayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAudioPlayerClient : System.ServiceModel.ClientBase<MusicPlayer.AudioPlayerService.IServiceAudioPlayer>, MusicPlayer.AudioPlayerService.IServiceAudioPlayer {
        
        public ServiceAudioPlayerClient(System.ServiceModel.InstanceContext instanceContext) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAudioPlayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AudioPlayerLibrary.Audio[] GetAudioList(int userId) {
            return base.Channel.GetAudioList(userId);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerLibrary.Audio[]> GetAudioListAsync(int userId) {
            return base.Channel.GetAudioListAsync(userId);
        }
        
        public AudioPlayerLibrary.Audio[] GetFavoriteAudioList(int userId) {
            return base.Channel.GetFavoriteAudioList(userId);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerLibrary.Audio[]> GetFavoriteAudioListAsync(int userId) {
            return base.Channel.GetFavoriteAudioListAsync(userId);
        }
        
        public byte[] GetAudioFile(string title) {
            return base.Channel.GetAudioFile(title);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAudioFileAsync(string title) {
            return base.Channel.GetAudioFileAsync(title);
        }
        
        public AudioPlayerLibrary.User Registration(string login, string password) {
            return base.Channel.Registration(login, password);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerLibrary.User> RegistrationAsync(string login, string password) {
            return base.Channel.RegistrationAsync(login, password);
        }
        
        public AudioPlayerLibrary.User Authorization(string login, string password) {
            return base.Channel.Authorization(login, password);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerLibrary.User> AuthorizationAsync(string login, string password) {
            return base.Channel.AuthorizationAsync(login, password);
        }
        
        public void EditUserIcon(int userId, byte[] icon) {
            base.Channel.EditUserIcon(userId, icon);
        }
        
        public System.Threading.Tasks.Task EditUserIconAsync(int userId, byte[] icon) {
            return base.Channel.EditUserIconAsync(userId, icon);
        }
        
        public void AddFavoriteAudio(int userId, int audioId) {
            base.Channel.AddFavoriteAudio(userId, audioId);
        }
        
        public System.Threading.Tasks.Task AddFavoriteAudioAsync(int userId, int audioId) {
            return base.Channel.AddFavoriteAudioAsync(userId, audioId);
        }
        
        public void DeleteFavoriteAudio(int userId, int audioId) {
            base.Channel.DeleteFavoriteAudio(userId, audioId);
        }
        
        public System.Threading.Tasks.Task DeleteFavoriteAudioAsync(int userId, int audioId) {
            return base.Channel.DeleteFavoriteAudioAsync(userId, audioId);
        }
        
        public int AddUserAudiolist(int userId, string title) {
            return base.Channel.AddUserAudiolist(userId, title);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAudiolistAsync(int userId, string title) {
            return base.Channel.AddUserAudiolistAsync(userId, title);
        }
        
        public AudioPlayerLibrary.UserAlboms[] GetUserAudiolist(int userId) {
            return base.Channel.GetUserAudiolist(userId);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerLibrary.UserAlboms[]> GetUserAudiolistAsync(int userId) {
            return base.Channel.GetUserAudiolistAsync(userId);
        }
        
        public void DeleteUserAudiolist(int userId, int audiolistId) {
            base.Channel.DeleteUserAudiolist(userId, audiolistId);
        }
        
        public System.Threading.Tasks.Task DeleteUserAudiolistAsync(int userId, int audiolistId) {
            return base.Channel.DeleteUserAudiolistAsync(userId, audiolistId);
        }
    }
}
