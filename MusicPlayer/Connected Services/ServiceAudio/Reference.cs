//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicPlayer.ServiceAudio {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceAudio.IServiceAudioPlayer")]
    public interface IServiceAudioPlayer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioListResponse")]
        MusicPlayer.Audio[] GetAudioList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioList", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioListResponse")]
        System.Threading.Tasks.Task<MusicPlayer.Audio[]> GetAudioListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioFile", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioFileResponse")]
        byte[] GetAudioFile(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/GetAudioFile", ReplyAction="http://tempuri.org/IServiceAudioPlayer/GetAudioFileResponse")]
        System.Threading.Tasks.Task<byte[]> GetAudioFileAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Registration", ReplyAction="http://tempuri.org/IServiceAudioPlayer/RegistrationResponse")]
        AudioPlayerService.User Registration(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Registration", ReplyAction="http://tempuri.org/IServiceAudioPlayer/RegistrationResponse")]
        System.Threading.Tasks.Task<AudioPlayerService.User> RegistrationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Authorization", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AuthorizationResponse")]
        AudioPlayerService.User Authorization(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/Authorization", ReplyAction="http://tempuri.org/IServiceAudioPlayer/AuthorizationResponse")]
        System.Threading.Tasks.Task<AudioPlayerService.User> AuthorizationAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/EditUserIcon", ReplyAction="http://tempuri.org/IServiceAudioPlayer/EditUserIconResponse")]
        void EditUserIcon(int userId, byte[] icon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceAudioPlayer/EditUserIcon", ReplyAction="http://tempuri.org/IServiceAudioPlayer/EditUserIconResponse")]
        System.Threading.Tasks.Task EditUserIconAsync(int userId, byte[] icon);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceAudioPlayerChannel : MusicPlayer.ServiceAudio.IServiceAudioPlayer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceAudioPlayerClient : System.ServiceModel.ClientBase<MusicPlayer.ServiceAudio.IServiceAudioPlayer>, MusicPlayer.ServiceAudio.IServiceAudioPlayer {
        
        public ServiceAudioPlayerClient(System.ServiceModel.InstanceContext instanceContext) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAudioPlayerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceAudioPlayerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MusicPlayer.Audio[] GetAudioList() {
            return base.Channel.GetAudioList();
        }
        
        public System.Threading.Tasks.Task<MusicPlayer.Audio[]> GetAudioListAsync() {
            return base.Channel.GetAudioListAsync();
        }
        
        public byte[] GetAudioFile(string title) {
            return base.Channel.GetAudioFile(title);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAudioFileAsync(string title) {
            return base.Channel.GetAudioFileAsync(title);
        }
        
        public AudioPlayerService.User Registration(string login, string password) {
            return base.Channel.Registration(login, password);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerService.User> RegistrationAsync(string login, string password) {
            return base.Channel.RegistrationAsync(login, password);
        }
        
        public AudioPlayerService.User Authorization(string login, string password) {
            return base.Channel.Authorization(login, password);
        }
        
        public System.Threading.Tasks.Task<AudioPlayerService.User> AuthorizationAsync(string login, string password) {
            return base.Channel.AuthorizationAsync(login, password);
        }
        
        public void EditUserIcon(int userId, byte[] icon) {
            base.Channel.EditUserIcon(userId, icon);
        }
        
        public System.Threading.Tasks.Task EditUserIconAsync(int userId, byte[] icon) {
            return base.Channel.EditUserIconAsync(userId, icon);
        }
    }
}
